// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.3
// source: proto/stricache.proto

package stricache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StricacheServiceClient is the client API for StricacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StricacheServiceClient interface {
	AddString(ctx context.Context, in *StringItem, opts ...grpc.CallOption) (*StringItem, error)
	AddInt(ctx context.Context, in *IntItem, opts ...grpc.CallOption) (*IntItem, error)
	AddFloat(ctx context.Context, in *FloatItem, opts ...grpc.CallOption) (*FloatItem, error)
	UnshiftString(ctx context.Context, in *StringItem, opts ...grpc.CallOption) (*StringItem, error)
	UnshiftInt(ctx context.Context, in *IntItem, opts ...grpc.CallOption) (*IntItem, error)
	UnshiftFloat(ctx context.Context, in *FloatItem, opts ...grpc.CallOption) (*FloatItem, error)
	GetString(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*StringItem, error)
	GetInt(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*IntItem, error)
	GetFloat(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*FloatItem, error)
	DeleteString(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*Success, error)
	DeleteInt(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*Success, error)
	DeleteFloat(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*Success, error)
	ShiftString(ctx context.Context, in *EmptyR, opts ...grpc.CallOption) (*Success, error)
	ShiftInt(ctx context.Context, in *EmptyR, opts ...grpc.CallOption) (*Success, error)
	ShiftFloat(ctx context.Context, in *EmptyR, opts ...grpc.CallOption) (*Success, error)
	PopString(ctx context.Context, in *EmptyR, opts ...grpc.CallOption) (*Success, error)
	PopInt(ctx context.Context, in *EmptyR, opts ...grpc.CallOption) (*Success, error)
	PopFloat(ctx context.Context, in *EmptyR, opts ...grpc.CallOption) (*Success, error)
}

type stricacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStricacheServiceClient(cc grpc.ClientConnInterface) StricacheServiceClient {
	return &stricacheServiceClient{cc}
}

func (c *stricacheServiceClient) AddString(ctx context.Context, in *StringItem, opts ...grpc.CallOption) (*StringItem, error) {
	out := new(StringItem)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/AddString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) AddInt(ctx context.Context, in *IntItem, opts ...grpc.CallOption) (*IntItem, error) {
	out := new(IntItem)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/AddInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) AddFloat(ctx context.Context, in *FloatItem, opts ...grpc.CallOption) (*FloatItem, error) {
	out := new(FloatItem)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/AddFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) UnshiftString(ctx context.Context, in *StringItem, opts ...grpc.CallOption) (*StringItem, error) {
	out := new(StringItem)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/UnshiftString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) UnshiftInt(ctx context.Context, in *IntItem, opts ...grpc.CallOption) (*IntItem, error) {
	out := new(IntItem)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/UnshiftInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) UnshiftFloat(ctx context.Context, in *FloatItem, opts ...grpc.CallOption) (*FloatItem, error) {
	out := new(FloatItem)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/UnshiftFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) GetString(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*StringItem, error) {
	out := new(StringItem)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/GetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) GetInt(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*IntItem, error) {
	out := new(IntItem)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/GetInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) GetFloat(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*FloatItem, error) {
	out := new(FloatItem)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/GetFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) DeleteString(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/DeleteString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) DeleteInt(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/DeleteInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) DeleteFloat(ctx context.Context, in *GetKey, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/DeleteFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) ShiftString(ctx context.Context, in *EmptyR, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/ShiftString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) ShiftInt(ctx context.Context, in *EmptyR, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/ShiftInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) ShiftFloat(ctx context.Context, in *EmptyR, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/ShiftFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) PopString(ctx context.Context, in *EmptyR, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/PopString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) PopInt(ctx context.Context, in *EmptyR, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/PopInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stricacheServiceClient) PopFloat(ctx context.Context, in *EmptyR, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/stricache.StricacheService/PopFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StricacheServiceServer is the server API for StricacheService service.
// All implementations must embed UnimplementedStricacheServiceServer
// for forward compatibility
type StricacheServiceServer interface {
	AddString(context.Context, *StringItem) (*StringItem, error)
	AddInt(context.Context, *IntItem) (*IntItem, error)
	AddFloat(context.Context, *FloatItem) (*FloatItem, error)
	UnshiftString(context.Context, *StringItem) (*StringItem, error)
	UnshiftInt(context.Context, *IntItem) (*IntItem, error)
	UnshiftFloat(context.Context, *FloatItem) (*FloatItem, error)
	GetString(context.Context, *GetKey) (*StringItem, error)
	GetInt(context.Context, *GetKey) (*IntItem, error)
	GetFloat(context.Context, *GetKey) (*FloatItem, error)
	DeleteString(context.Context, *GetKey) (*Success, error)
	DeleteInt(context.Context, *GetKey) (*Success, error)
	DeleteFloat(context.Context, *GetKey) (*Success, error)
	ShiftString(context.Context, *EmptyR) (*Success, error)
	ShiftInt(context.Context, *EmptyR) (*Success, error)
	ShiftFloat(context.Context, *EmptyR) (*Success, error)
	PopString(context.Context, *EmptyR) (*Success, error)
	PopInt(context.Context, *EmptyR) (*Success, error)
	PopFloat(context.Context, *EmptyR) (*Success, error)
	mustEmbedUnimplementedStricacheServiceServer()
}

// UnimplementedStricacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStricacheServiceServer struct {
}

func (UnimplementedStricacheServiceServer) AddString(context.Context, *StringItem) (*StringItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddString not implemented")
}
func (UnimplementedStricacheServiceServer) AddInt(context.Context, *IntItem) (*IntItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInt not implemented")
}
func (UnimplementedStricacheServiceServer) AddFloat(context.Context, *FloatItem) (*FloatItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFloat not implemented")
}
func (UnimplementedStricacheServiceServer) UnshiftString(context.Context, *StringItem) (*StringItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshiftString not implemented")
}
func (UnimplementedStricacheServiceServer) UnshiftInt(context.Context, *IntItem) (*IntItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshiftInt not implemented")
}
func (UnimplementedStricacheServiceServer) UnshiftFloat(context.Context, *FloatItem) (*FloatItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshiftFloat not implemented")
}
func (UnimplementedStricacheServiceServer) GetString(context.Context, *GetKey) (*StringItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetString not implemented")
}
func (UnimplementedStricacheServiceServer) GetInt(context.Context, *GetKey) (*IntItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInt not implemented")
}
func (UnimplementedStricacheServiceServer) GetFloat(context.Context, *GetKey) (*FloatItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFloat not implemented")
}
func (UnimplementedStricacheServiceServer) DeleteString(context.Context, *GetKey) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteString not implemented")
}
func (UnimplementedStricacheServiceServer) DeleteInt(context.Context, *GetKey) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInt not implemented")
}
func (UnimplementedStricacheServiceServer) DeleteFloat(context.Context, *GetKey) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFloat not implemented")
}
func (UnimplementedStricacheServiceServer) ShiftString(context.Context, *EmptyR) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShiftString not implemented")
}
func (UnimplementedStricacheServiceServer) ShiftInt(context.Context, *EmptyR) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShiftInt not implemented")
}
func (UnimplementedStricacheServiceServer) ShiftFloat(context.Context, *EmptyR) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShiftFloat not implemented")
}
func (UnimplementedStricacheServiceServer) PopString(context.Context, *EmptyR) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopString not implemented")
}
func (UnimplementedStricacheServiceServer) PopInt(context.Context, *EmptyR) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopInt not implemented")
}
func (UnimplementedStricacheServiceServer) PopFloat(context.Context, *EmptyR) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopFloat not implemented")
}
func (UnimplementedStricacheServiceServer) mustEmbedUnimplementedStricacheServiceServer() {}

// UnsafeStricacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StricacheServiceServer will
// result in compilation errors.
type UnsafeStricacheServiceServer interface {
	mustEmbedUnimplementedStricacheServiceServer()
}

func RegisterStricacheServiceServer(s grpc.ServiceRegistrar, srv StricacheServiceServer) {
	s.RegisterService(&StricacheService_ServiceDesc, srv)
}

func _StricacheService_AddString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).AddString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/AddString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).AddString(ctx, req.(*StringItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_AddInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).AddInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/AddInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).AddInt(ctx, req.(*IntItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_AddFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FloatItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).AddFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/AddFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).AddFloat(ctx, req.(*FloatItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_UnshiftString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).UnshiftString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/UnshiftString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).UnshiftString(ctx, req.(*StringItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_UnshiftInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).UnshiftInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/UnshiftInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).UnshiftInt(ctx, req.(*IntItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_UnshiftFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FloatItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).UnshiftFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/UnshiftFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).UnshiftFloat(ctx, req.(*FloatItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_GetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).GetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/GetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).GetString(ctx, req.(*GetKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_GetInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).GetInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/GetInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).GetInt(ctx, req.(*GetKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_GetFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).GetFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/GetFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).GetFloat(ctx, req.(*GetKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_DeleteString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).DeleteString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/DeleteString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).DeleteString(ctx, req.(*GetKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_DeleteInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).DeleteInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/DeleteInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).DeleteInt(ctx, req.(*GetKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_DeleteFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).DeleteFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/DeleteFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).DeleteFloat(ctx, req.(*GetKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_ShiftString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).ShiftString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/ShiftString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).ShiftString(ctx, req.(*EmptyR))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_ShiftInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).ShiftInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/ShiftInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).ShiftInt(ctx, req.(*EmptyR))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_ShiftFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).ShiftFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/ShiftFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).ShiftFloat(ctx, req.(*EmptyR))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_PopString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).PopString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/PopString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).PopString(ctx, req.(*EmptyR))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_PopInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).PopInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/PopInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).PopInt(ctx, req.(*EmptyR))
	}
	return interceptor(ctx, in, info, handler)
}

func _StricacheService_PopFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StricacheServiceServer).PopFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stricache.StricacheService/PopFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StricacheServiceServer).PopFloat(ctx, req.(*EmptyR))
	}
	return interceptor(ctx, in, info, handler)
}

// StricacheService_ServiceDesc is the grpc.ServiceDesc for StricacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StricacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stricache.StricacheService",
	HandlerType: (*StricacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddString",
			Handler:    _StricacheService_AddString_Handler,
		},
		{
			MethodName: "AddInt",
			Handler:    _StricacheService_AddInt_Handler,
		},
		{
			MethodName: "AddFloat",
			Handler:    _StricacheService_AddFloat_Handler,
		},
		{
			MethodName: "UnshiftString",
			Handler:    _StricacheService_UnshiftString_Handler,
		},
		{
			MethodName: "UnshiftInt",
			Handler:    _StricacheService_UnshiftInt_Handler,
		},
		{
			MethodName: "UnshiftFloat",
			Handler:    _StricacheService_UnshiftFloat_Handler,
		},
		{
			MethodName: "GetString",
			Handler:    _StricacheService_GetString_Handler,
		},
		{
			MethodName: "GetInt",
			Handler:    _StricacheService_GetInt_Handler,
		},
		{
			MethodName: "GetFloat",
			Handler:    _StricacheService_GetFloat_Handler,
		},
		{
			MethodName: "DeleteString",
			Handler:    _StricacheService_DeleteString_Handler,
		},
		{
			MethodName: "DeleteInt",
			Handler:    _StricacheService_DeleteInt_Handler,
		},
		{
			MethodName: "DeleteFloat",
			Handler:    _StricacheService_DeleteFloat_Handler,
		},
		{
			MethodName: "ShiftString",
			Handler:    _StricacheService_ShiftString_Handler,
		},
		{
			MethodName: "ShiftInt",
			Handler:    _StricacheService_ShiftInt_Handler,
		},
		{
			MethodName: "ShiftFloat",
			Handler:    _StricacheService_ShiftFloat_Handler,
		},
		{
			MethodName: "PopString",
			Handler:    _StricacheService_PopString_Handler,
		},
		{
			MethodName: "PopInt",
			Handler:    _StricacheService_PopInt_Handler,
		},
		{
			MethodName: "PopFloat",
			Handler:    _StricacheService_PopFloat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stricache.proto",
}
